@page "/likedtomultiple"
@using SpotifyAPI.Web;
@using Microsoft.Extensions.Configuration
@using SpotifyMigrator.Shared;
@inject IConfiguration Configuration
@inject HttpClient HttpClient
@inject SpotifyInfos SpotifyInfos;
@inject NavigationManager NavManager;

<div style="position: absolute; top: 0; bottom: 50%; left: 0; right: 0; margin: auto; width: 40em; height: 20em; text-align: center">
    <h1>Spotify Migrator</h1>

    @if (!PlaylistsCreated)
    {
        <h2 style="margin-bottom: 2em">Creating your playlists</h2>
        <label style="text-align: left">Name of the playlist</label>
        <TextEdit @bind-Text="@CurrentValue" />
        <Button Color="Color.Primary" Outline onclick="@CreatePlaylist" Style="width: 50%; margin-top: 1em">Create</Button>

        <h5 style="margin-top: 2em">Add Manually</h5>
        <label style="text-align: left">Name of the playlist</label>
        <TextEdit @bind-Text="@ManualName" />

        <label style="text-align: left; margin-top: 2em">Playlist id</label>
        <TextEdit @bind-Text="@ManualCurrentValue" />

        <Button Color="Color.Primary" Outline onclick="@AddPlaylist" Style="width: 40%; margin-top: 1em; display: block; text-align: center; margin: auto; margin-top: 2em">Add</Button>
        <Button Color="Color.Primary" Outline onclick="@Next" Style="width: 100%; margin-top: 1em">Next</Button>
    } else
    {
        <h2>@toShow</h2>
        if (toShow != "Wait while we fetch your songs")
        {
            <div style="display: flex; gap: 1em; margin-top: 2em">
                @foreach (var playlist in SpotifyInfos.Playlists)
                {

                    <Button Color="Color.Dark" 

                Outline onclick="@(() => AddSongToPlaylist(@playlist))" Style="width: 20%" Disabled="@playlist.Hide">@playlist.Title</Button>
                }
            </div>
        <Button Color="Color.Primary" Outline onclick="@NextSong" Style="width: 100%; margin-top: 1em">Next/Skip</Button>
        }
    }
</div>

@code {
    private bool PlaylistsCreated = false;
    private string CurrentValue { get; set; }
    private string ManualName { get; set; }
    private int Done { get; set; } = 0;
    private string ManualCurrentValue { get; set; }
    private string toShow { get; set; } = "";
    private SavedTrack CurrentTrack { get; set; }
    private async Task CreatePlaylist()
    {
        var response = await HttpClient.PostAsJsonAsync("api/Spotify/CreatePlaylist", new { Name = CurrentValue });
        SpotifyInfos.Playlists.Add(await response.Content.ReadFromJsonAsync<PlaylistInfo>());
        CurrentValue = "";
    }

    private async Task AddPlaylist()
    {
        SpotifyInfos.Playlists.Add(new PlaylistInfo(ManualName, ManualCurrentValue));
        ManualName = "";
        ManualCurrentValue = "";
    }

    private async Task Next()
    {
        PlaylistsCreated = true;
        toShow = "Wait while we fetch your songs";
        SpotifyInfos.TracksInfos = await HttpClient.GetFromJsonAsync<Queue<SavedTrack>>("api/Spotify/Songs");

        var track = SpotifyInfos.TracksInfos.Dequeue();
        CurrentTrack = track;
        toShow = "Choose for the song: " + track.Track.Name + " (" + Done + " / " + SpotifyInfos.TracksInfos.Count() + " left)";

        await HttpClient.PostAsJsonAsync("api/Spotify/Playback", new { Uri = track.Track.Uri });
    }

    private async Task AddSongToPlaylist(PlaylistInfo playlist)
    {
        await HttpClient.PostAsJsonAsync("api/Spotify/AddToPlaylist", new { PlaylistId = playlist.PlaylistId, TrackId = CurrentTrack.Track.Uri });
        playlist.Hide = true;
        StateHasChanged();
    }

    private async Task NextSong()
    {
        await HttpClient.PostAsJsonAsync("api/Spotify/AddToPlaylist", new { PlaylistId = Configuration["GlobalPlaylist"], TrackId = CurrentTrack.Track.Uri });
        foreach(var playlist in SpotifyInfos.Playlists)
        {
            playlist.Hide = false;
        }
        Done += 1;
        if (SpotifyInfos.TracksInfos.Count() > 0)
        {
            var track = SpotifyInfos.TracksInfos.Dequeue();
            CurrentTrack = track;
            toShow = "Choose for the song: " + track.Track.Name + " (" + Done + " / " + SpotifyInfos.TracksInfos.Count() + " left)";
            await HttpClient.PostAsJsonAsync("api/Spotify/Playback", new { Uri = track.Track.Uri });

        } else
        {
            NavManager.NavigateTo("/done");
        }
    }
}